import org.antlr.v4.runtime.tree.ParseTreeVisitor;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.tree.*;
import org.antlr.v4.runtime.CharStreams;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class main {
    public static void main(String[] args) throws IOException{

	// we expect exactly one argument: the name of the input file
	if (args.length!=1) {
	    System.err.println("\n");
	    System.err.println("Please give as input argument a filename\n");
	    System.exit(-1);
	}
	String filename=args[0];

	// open the input file
	CharStream input = CharStreams.fromFileName(filename);
	    //new ANTLRFileStream (filename); // depricated
	
	// create a lexer/scanner
	ccLexer lex = new ccLexer(input);
	
	// get the stream of tokens from the scanner
	CommonTokenStream tokens = new CommonTokenStream(lex);
	
	// create a parser
	ccParser parser = new ccParser(tokens);
	
	// and parse anything from the grammar for "start"
	ParseTree parseTree = parser.start();

	// Construct an interpreter and run it on the parse tree
	Interpreter interpreter = new Interpreter();
	Program result=interpreter.visit(parseTree);
    }
}

// We write an interpreter that implements interface
// "implVisitor<T>" that is automatically generated by ANTLR
// This is parameterized over a return type "<T>" which is in our case
// simply a Double.

class Interpreter extends AbstractParseTreeVisitor<AST>
		implements ccVisitor<AST> {

	AST visitStart(ccParser.StartContext ctx) {
		List<Line> ps = new ArrayList<Line>();
		for(ccParser.LineContext i : ctx.cs) {
			ps.add((Line) visit(i));
		}
		return new Sequence(ps);
	}

	AST visitSignal(ccParser.SignalContext ctx) {
		return new Signal(ctx.x.getText());
	}

	AST visitNot(ccParser.NotContext ctx) {
		return new Not((Exp) visit(ctx.e))
	}

	AST visitDisjunction(ccParser.DisjunctionContext ctx) {
		return new Disjunction((Exp) visit(ctx.e1), (Exp) visit(ctx.e2));
	}

	AST visitExpression(ccParser.ExpressionContext ctx) {
		return new Expression((Exp) visit(ctx.e));
	}

	AST visitConjunction(ccParser.ConjunctionContext ctx) {
		return new Conjunction((Exp) visit(ctx.e1), (Exp) visit(ctx.e2));
	}

	AST visitFunction_call(ccParser.Function_callContext ctx) {
		return new FunctionCall(new Signal (visit(ctx.i.getText())), new Expression((Exp) visit(ctx.e)));
	}

	AST visitExps(ccParser.ExpsContext ctx) {

	}

	AST visitArgs(ccParser.ArgsContext ctx) {

	}

	AST visitHardwaredecl(ccParser.HardwaredeclContext ctx) {

	}

	AST visitInputs(ccParser.InputsContext ctx) {

	}

	AST visitOutputs(ccParser.OutputsContext ctx) {
	
	}

	AST visitLatches(ccParser.LatchesContext ctx) {

	}

	AST visitDef(ccParser.DefContext ctx) {
		// Implementation needed
		return null;
	}

	AST visitUpdates(ccParser.UpdatesContext ctx) {

	}

	AST visitSiminputs(ccParser.SiminputsContext ctx) {

	}
}
